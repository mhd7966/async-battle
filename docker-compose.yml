version: '3.8'

services:
  # Consumer Application
  consumer:
    build: .
    ports:
      - "8081:8080"
      - "2113:2112"
    environment:
      # App Configuration
      - APP_DEBUG=true
      - APP_ENV=development
      - APP_INSTANCE_ID=async-battle-consumer
      - APP_PORT=8080
      
      # Redis Configuration
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=
      - REDIS_DB=0
      - REDIS_STREAM=test-stream
      
      # Kafka Configuration
      - KAFKA_BROKERS=kafka:9092
      - KAFKA_TOPIC=test-topic
      - KAFKA_GROUP_ID=test-group
      - KAFKA_CLIENT_ID=async-battle-consumer
      - KAFKA_MAX_MESSAGES_PER_SECOND=20
      
      # RabbitMQ Configuration
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=guest
      - RABBITMQ_PASSWORD=guest
      - RABBITMQ_VHOST=/
      - RABBITMQ_QUEUE=test-queue
      - RABBITMQ_EXCHANGE=test-exchange
      
      # NATS Configuration
      - NATS_URL=nats://nats:4222
      - NATS_STREAM=test-stream
      - NATS_SUBJECT=test.subject
      - NATS_CONSUMER=test-consumer
      
      # Redpanda Configuration
      - REDPANDA_BROKERS=redpanda:19092
      - REDPANDA_TOPIC=test-topic
      - REDPANDA_GROUP_ID=test-group
      - REDPANDA_CLIENT_ID=async-battle-consumer
      
      # Log Configuration
      - LOG_LEVEL=info
      - LOG_SENTRY_DSN=
    command: ["./consumer"]
    networks:
      - async-network
    depends_on:
      - redis
      - kafka
      - kafka-topic-creator
      - rabbitmq
      - nats
      - redpanda
  # Redis (for Redis Streams)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - async-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Apache Kafka
  kafka:
    image: "bitnami/kafka:3.4.1"
    restart: always
    ports:
      - 2181:2181
      - 9092:9092
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:2181
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CFG_DELETE_TOPIC_ENABLE=true
      - KAFKA_CFG_NUM_PARTITIONS=3
      - KAFKA_CFG_DEFAULT_REPLICATION_FACTOR=1
    networks:
      - async-network
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kafka Topic Creator
  kafka-topic-creator:
    image: "bitnami/kafka:3.4.1"
    restart: "no"
    depends_on:
      kafka:
        condition: service_healthy
    command: >
      sh -c "
        echo 'Waiting for Kafka to be ready...' &&
        sleep 10 &&
        echo 'Creating topic: test-topic' &&
        kafka-topics.sh --bootstrap-server kafka:9092 --create --topic test-topic --partitions 3 --replication-factor 1 --if-not-exists &&
        echo 'Topic test-topic created successfully' &&
        kafka-topics.sh --bootstrap-server kafka:9092 --list
      "
    networks:
      - async-network

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui
    depends_on:
      - kafka
    ports:
      - 8082:8080
    environment:
      - KAFKA_CLUSTERS_0_NAME= local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS= kafka:9092
    networks:
      - async-network

  # RabbitMQ
  rabbitmq:
    image: rabbitmq:3-management-alpine
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - async-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # NATS Server
  nats:
    image: nats:2.9-alpine
    ports:
      - "4222:4222"
      - "8222:8222"
    command: nats-server --jetstream --http_port 8222
    networks:
      - async-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8222/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redpanda
  redpanda:
    image: redpandadata/redpanda:latest
    command:
      - redpanda
      - start
      - --kafka-addr internal://0.0.0.0:9092,external://0.0.0.0:19092
      - --advertise-kafka-addr internal://redpanda:9092,external://localhost:19092
      - --pandaproxy-addr internal://0.0.0.0:8082,external://0.0.0.0:18082
      - --advertise-pandaproxy-addr internal://redpanda:8082,external://localhost:18082
      - --schema-registry-addr internal://0.0.0.0:8081,external://0.0.0.0:18081
      - --rpc-addr redpanda:33145
      - --advertise-rpc-addr redpanda:33145
      - --mode dev-container
      - --smp 1
      - --default-log-level=info
    volumes:
      - redpanda_data:/var/lib/redpanda/data
    networks:
      - async-network
    ports:
      - 18081:18081
      - 18082:18082
      - 19092:19092
      - 19644:9644
    healthcheck:
      test: ["CMD", "rpk", "cluster", "health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - ./rabbitmq_rules.yml:/etc/prometheus/rabbitmq_rules.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - async-network
    depends_on:
      - consumer

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    networks:
      - async-network
    depends_on:
      - prometheus

volumes:
  redis_data:
  rabbitmq_data:
  redpanda_data:

networks:
  async-network:
    driver: bridge 

